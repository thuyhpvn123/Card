// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "forge-std/console.sol";
/*
* Lu·ªìng migrate s·ªë d∆∞ v√† code ƒë√†o: c√≥ 2 smart contract l√† migrareWallet v√† migrateCode.

- b∆∞·ªõc 1, khi user import private key
-- nonce ƒëang l√† 0
--> user g·ªçi ƒë·ªÉ li√™n k·∫øt private key c·ªßa BLS v√† address ECDH

- b∆∞·ªõc 2, ti·∫øn h√†nh g·ªçi v·ªõi address BLS ƒë·∫øn migrareWallet ƒë·ªÉ check c√≥ balance
--> n·∫øu c√≥ th√¨ client g·ªçi h√†m migrate v·ªõi: address ECDH device nh·∫≠n, public key bls, signature c·ªßa public key v√† hash c·ªßa address ECDH device nh·∫≠n
--> c·ªông v√†o miningDevice v√† ƒë√°nh d·∫•u ƒë√£ li√™n k·∫øt

- b∆∞·ªõc 3, l·∫•y public code g·ªçi t·ªõi migrateCode, n·∫øu c√≥ th√¨ t·∫°o ·ªü miningCode th√¥ng tin th·ªùi gian c√≤n l·∫°i c·ªßa code

*/

/*

thu·∫≠t to√°n:

1. done
=> c√°ch n√†o ƒë·ªÉ bi·∫øt validator minh b·∫°ch trong tr·∫£ cho miner !?

- device g·ªçi h√†m getJob ·ªü SM quy ƒë·ªãnh 0x00000000000000000000000000000010, validator tr·∫£ v·ªÅ link c·∫ßn query. device query k·∫øt qu·∫£ v√† tr·∫£ v·ªÅ validator. validator tr·∫£ th∆∞·ªüng theo ph√∫t. trong 1 ph√∫t m√† device c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c vi·ªác y√™u c·∫ßu th√¨ s·∫Ω ƒë∆∞·ª£c nh·∫≠n th∆∞·ªüng. device sau ƒë√≥ l·∫°i ti·∫øp t·ª•c th·ª±c hi·ªán.
-- getJob tr·∫£ v·ªÅ c√¥ng vi·ªác l√† th·ª±c hi·ªán verify l·∫°i c√°c giao d·ªãch trong block n·∫øu ph·∫ßn c·ª©ng ƒë√°p ·ª©ng ƒë·ªß; n·∫øu ph·∫ßn c·ª©ng ko ƒë·ªß th√¨ m·ªü link youtube gi·ªõi thi·ªáu, ho·∫∑c link qu·∫£ng c√°o l√™n trong 10 gi√¢y.

- validator ti·∫øn h√†nh c·ªông cho miner v√† l∆∞u v√†o leveldb offfchain.

=> m·ªói ng√†y validator t·ªïng k·∫øt c√°c miner ƒë√†o v√† c·ªông v√†o pending balance ·ªü SM PendingMiningDevice. Sau 48h th√¨ user c√≥ th·ªÉ y√™u c·∫ßu c·ªông pending balance v√†o balance. c·∫ßn l∆∞u pending balance theo th·ªùi gian.


-- khi ƒë√≥, validator s·∫Ω ch·ªçn ng·∫´u nhi√™n c·ªßa validator kh√°c ƒë·ªÉ g·ª≠i x√°c th·ª±c v·ªÅ phone qua noti, y√™u c·∫ßu th·ª±c hi·ªán b·∫•m v√†o. n·∫øu trong v√≤ng 36h m√† phone ko b·∫•m v√†o th√¨ user s·∫Ω b·ªã kho√°.
-- device + secret s·∫Ω ƒë∆∞·ª£c m√£ ho√° hash ƒë·ªÉ l∆∞u l√™n SM AuthChallenge, sau 48h, offchain s·∫Ω g·ªçi l√™n ƒë·ªÉ ki·ªÉm tra.
-- khi client nh·∫≠n ƒë∆∞·ª£c noti, client b·∫•m v√†o, th√¨ client s·∫Ω g·ª≠i ƒë·∫øn SM AuthChallenge.

* tr·∫£ th∆∞·ªüng:
- n·∫øu t√†i kho·∫£n ƒë·ª´ng ƒë√†o trong 30 ng√†y, th√¨ s·∫Ω b·ªã kho√° vƒ©nh vi·ªÖn s·ªë d∆∞.

- khi miner chuy·ªÉn pendingBalance v·ªÅ Balance, th√¨ validator chuy·ªÉn ETH v·ªÅ cho SM MiningUser gi·ªØ

- m·ªói ng√†y khi tr·∫£ cho user, th√¨ tr·∫£ l√™n cho 3 t·∫ßng gi·ªõi thi·ªáu l√™n tr√™n, v√† showroom c·ªßa user


2. done

Active code

- user ƒë∆∞a bƒÉm c·ªßa private code v√† salt l√™n qua SM MiningCode h√†m commitActivationCode

- user ƒë∆∞a l√™n cho chain qua h√†m encryptedCode ƒë·ªÉ BE gi·∫£i m√£, v√† ƒë·∫£m b·∫£o k√≠ch ho·∫°t th√†nh c√¥ng cho user

- g·ª≠i code, salt v·ªõi h√†m keccak256(abi.encodePacked(code, secret, userAddress))
- SM l∆∞u l·∫°i time

- ti·∫øp theo activeCode qua keccak256(abi.encodePacked(code, secret, userAddress)).
- y√™u c·∫ßu time ƒë√£ t·ªìn t·∫°i t·ª´ 1 ph√∫t tr∆∞·ªõc

-> check code th√¨ hashed 2 

=> ph·∫ßn code ƒë√†o, m·ªói ng√†y validator t·ªïng k·∫øt c√°c m√£ ƒë√†o v√† bi·ªÉu quy·∫øt c·ªông balance

3. -> ch∆∞a l√†m
- ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng s√°ch metanode, c·∫ßn c√≥ circle. m·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c x√°c th·ª±c circle cho 5 ng∆∞·ªùi, v√† ƒëi·ªÅu ki·ªán l√† c·∫ßn ph·∫£i ·ªü g·∫ßn nhau.

4. kh√¥ng l√†m:
  + lock key
  + lock time
  + unlock key

*/

library Signature {

    function recoverSigner(bytes32 hash, bytes memory signature) internal pure returns (address) {
        bytes32 r;
        bytes32 s;
        uint8 v;
        bytes memory sign = add27ToLastByte(signature);
        require(sign.length == 65, "Invalid signature length");
        assembly {
            r := mload(add(sign, 32))
            s := mload(add(sign, 64))
            v := byte(0, mload(add(sign, 96)))
        }

        return ecrecover(hash, v, r, s);
    }
    function add27ToLastByte(bytes memory input) public pure returns (bytes memory) {
        require(input.length > 0, "Empty input");

        // Copy input to new bytes
        bytes memory output = input;

        // Modify last byte
        output[output.length - 1] = bytes1(uint8(output[output.length - 1]) + 27);

        return output;

    }

}

interface PublicKeyFromPrivateKey {
    function getPublicKeyFromPrivate(bytes32 _privateCode) external returns (bytes memory);
}
interface IMiningDevice {
    function addBalance(address miner, uint256 amount) external;
    function linkCodeWithUser(address _user, address _device) external;
}
interface ICode {
    function activateCode(uint256 indexCode,address user) external returns (uint256, uint256, uint256);
}
interface IMiningUser {
    function lockUser(address _user) external;
    function checkJoined(address _user) external view returns (bool);
    function getParentUser(address _user, uint8 _level) external view returns (address[] memory);
}


contract GetJob {
    struct Job {
        bytes32 jobHash;
        string jobType; // "verify" | "ad"
        string dataLink;
        uint256 timestamp;
    }

    mapping(address => Job) public lastJob;
    mapping(address => uint256) public lastActiveTime;

    address[] public activeUsers;
    mapping(address => bool) public isInActiveList;

    event JobAssigned(address indexed user, bytes32 jobHash, string jobType, string dataLink);
    event JobCompleted(address indexed user, bytes32 jobHash, string result, uint256 time);

    /// @dev User g·ªçi h√†m n√†y m·ªói l·∫ßn l·∫•y job m·ªõi. Truy·ªÅn k·∫øt qu·∫£ job tr∆∞·ªõc n·∫øu c√≥.
    function getJob(bytes32 prevJobHash, string calldata result) external returns (
        bytes32 newJobHash,
        string memory jobType,
        string memory dataLink
    ) {

        // Ki·ªÉm tra th·ªùi gian gi·ªØa c√°c l·∫ßn g·ªçi
        require(block.timestamp >= lastActiveTime[msg.sender] + 1 minutes, "Must wait 1 minute before calling again");

        // N·∫øu ƒë√£ t·ª´ng nh·∫≠n job tr∆∞·ªõc ƒë√≥, validate k·∫øt qu·∫£
        if (lastJob[msg.sender].jobHash != 0x0) {
            require(prevJobHash == lastJob[msg.sender].jobHash, "Invalid job hash");
            emit JobCompleted(msg.sender, prevJobHash, result, block.timestamp);
        }

        // Ghi nh·∫≠n ho·∫°t ƒë·ªông
        lastActiveTime[msg.sender] = block.timestamp;
        if (!isInActiveList[msg.sender]) {
            activeUsers.push(msg.sender);
            isInActiveList[msg.sender] = true;
        }

        // T·∫°o job m·ªõi
        string memory _jobType;
        string memory _dataLink;

        // gi·∫£ ƒë·ªãnh l√† random: n·∫øu block.timestamp % 2 == 0 th√¨ verify, else qu·∫£ng c√°o
        if (block.timestamp % 2 == 0) {
            _jobType = "verify";
            _dataLink = "https://example.com/block_verify_data.json";
        } else {
            _jobType = "ad";
            _dataLink = "https://youtube.com/watch?v=dQw4w9WgXcQ"; // üòè
        }

        newJobHash = keccak256(abi.encodePacked(msg.sender, block.timestamp, _dataLink));

        // L∆∞u job m·ªõi
        lastJob[msg.sender] = Job({
            jobHash: newJobHash,
            jobType: _jobType,
            dataLink: _dataLink,
            timestamp: block.timestamp
        });

        emit JobAssigned(msg.sender, newJobHash, _jobType, _dataLink);
        return (newJobHash, _jobType, _dataLink);
    }

    function getRecentActiveUsers(uint256 sinceTime) external view returns (address[] memory users) {
        uint256 count = 0;
        for (uint256 i = 0; i < activeUsers.length; i++) {
            if (lastActiveTime[activeUsers[i]] >= sinceTime) {
                count++;
            }
        }

        users = new address[](count);
        uint256 idx = 0;
        for (uint256 i = 0; i < activeUsers.length; i++) {
            if (lastActiveTime[activeUsers[i]] >= sinceTime) {
                users[idx++] = activeUsers[i];
            }
        }
    }

    function getLastJob(address user) external view returns (Job memory) {
        return lastJob[user];
    }

    function getActiveUsersCount() external view returns (uint256) {
        return activeUsers.length;
    }

    function clearCurrentJob() external {
        require(lastJob[msg.sender].jobHash != 0x0, "No job to clear");
        delete lastJob[msg.sender];
    }

}


contract PendingMiningDevice {
    struct MiningReward {
        uint256 amount; // S·ªë ti·ªÅn ƒëang ch·ªù ƒë∆∞·ª£c chuy·ªÉn
        uint256 pendingSince; // Th·ªùi gian pending b·∫Øt ƒë·∫ßu
        bool isClaimed; // Tr·∫°ng th√°i y√™u c·∫ßu r√∫t
    }

    mapping(address => MiningReward[]) public minerRewards; // Mapping ƒë·ªÉ l∆∞u tr·ªØ pending reward cho t·ª´ng miner
    mapping(address => uint256) public pendingBalance; // T·ªïng pending balance c·ªßa t·ª´ng miner
    
    event RewardPending(address indexed miner, uint256 amount);
    event RewardClaimed(address indexed miner, uint256 amount);
    event RewardTransferred(address indexed miner, uint256 amount);

    address public validator; // ƒê·ªãa ch·ªâ c·ªßa validator, ch·ªâ validator m·ªõi c√≥ th·ªÉ c·ªông th∆∞·ªüng
    address public miningDevice; // ƒê·ªãa ch·ªâ c·ªßa MiningDevice contract
    address public miningUser; // ƒê·ªãa ch·ªâ c·ªßa MiningUser contract, n∆°i l∆∞u tr·ªØ ETH cho miners

    modifier onlyValidator() {
        require(msg.sender == validator, "Only validator can call this");
        _;
    }

    modifier onlyMiningDevice() {
        require(msg.sender == miningDevice, "Only mining device can call this");
        _;
    }

    constructor(address _miningDevice, address _miningUser) {
        validator = msg.sender; // Validator l√† ng∆∞·ªùi deploy contract
        miningDevice = _miningDevice; // G√°n ƒë·ªãa ch·ªâ c·ªßa MiningDevice contract
        miningUser = _miningUser; // G√°n ƒë·ªãa ch·ªâ c·ªßa MiningUser contract
    }

    // C·ªông ph·∫ßn th∆∞·ªüng v√†o pending balance c·ªßa miner
    function addPendingReward(address miner, uint256 amount) external onlyValidator {
        require(amount > 0, "Amount must be greater than 0 addPendingReward");

        // L∆∞u reward v√†o array cho miner
        minerRewards[miner].push(MiningReward({
            amount: amount,
            pendingSince: block.timestamp,
            isClaimed: false
        }));

        // C·ªông v√†o t·ªïng pending balance c·ªßa miner
        pendingBalance[miner] += amount;

        emit RewardPending(miner, amount);
    }

    // Miner y√™u c·∫ßu r√∫t reward sau 48h
    function claimReward() external {
        address miner = msg.sender; // L·∫•y miner t·ª´ msg.sender (ng∆∞·ªùi g·ªçi h√†m)
        require(pendingBalance[miner] > 0, "No reward available for claim");
        uint256 claimableAmount = 0;
        
        // Duy·ªát qua c√°c pending rewards v√† ki·ªÉm tra th·ªùi gian pending >= 48h
        for (uint256 i = 0; i < minerRewards[miner].length; i++) {
            if (!minerRewards[miner][i].isClaimed && 
                block.timestamp - minerRewards[miner][i].pendingSince >= 48 hours) {
                
                // C·ªông reward ƒë·ªß ƒëi·ªÅu ki·ªán v√†o claimableAmount
                claimableAmount += minerRewards[miner][i].amount;
                
                // ƒê√°nh d·∫•u reward l√† ƒë√£ y√™u c·∫ßu
                minerRewards[miner][i].isClaimed = true;
            }
        }

        require(claimableAmount > 0, "No reward available for claim");
        require(pendingBalance[miner] >= claimableAmount, "No reward available for claim");
        
        // C·ªông reward v√†o balance ch√≠nh c·ªßa miner
        pendingBalance[miner] -= claimableAmount;
        
        // G·ªçi h√†m addBalance trong MiningDevice ƒë·ªÉ c·ªông balance cho miner
        IMiningDevice(miningDevice).addBalance(miner, claimableAmount);

        emit RewardClaimed(miner, claimableAmount);
    }

    // Validator c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ validator n·∫øu c·∫ßn
    function setValidator(address newValidator) external onlyValidator {
        validator = newValidator;
    }

    // MiningDevice c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ c·ªßa contract MiningDevice n·∫øu c·∫ßn
    function setMiningDevice(address newMiningDevice) external onlyValidator {
        miningDevice = newMiningDevice;
    }

    // MiningUser c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ c·ªßa contract MiningUser n·∫øu c·∫ßn
    function setMiningUser(address newMiningUser) external onlyValidator {
        miningUser = newMiningUser;
    }
}




/**
 * @title Secure Activation
 * @dev C∆° ch·∫ø k√≠ch ho·∫°t an to√†n v·ªõi commit-reveal
 * - Ng∆∞·ªùi d√πng tr∆∞·ªõc ti√™n g·ª≠i commit ch·ª©a bƒÉm c·ªßa (privateCode, secret, userAddress)
 * - Sau √≠t nh·∫•t 15 gi√¢y, h·ªç m·ªõi c√≥ th·ªÉ g·ª≠i privateCode th·∫≠t ƒë·ªÉ active
 * - C∆° ch·∫ø n√†y gi√∫p ch·ªëng spam v√† chi·∫øm quy·ªÅn k√≠ch ho·∫°t t·ª´ node pool
 */
contract MiningCode {
    struct ActivationCommit {
        bytes32 commitHash;
        uint256 commitTime;
    }

    struct DataCode {
        address owner;
        address device;
        uint256 boostRate;
        uint256 maxDuration;
        address showroom;
        address ref_1;
        address ref_2;
        address ref_3;
        address ref_4;
        uint256 activeTime;
        uint256 expireTime;
        bytes32 privateCode;
    }
    // uint256 private constant TIME_MINING = 24 hours;
    uint256 private constant TIME_MINING = 1 minutes; //for test only

    ICode public codeContract;

    mapping(address => ActivationCommit) public commits;

    // M·ªói code l√† 1 c·∫∑p private key v√† public key, khi check s·∫Ω d√πng hashed c·ªßa public key
    // Khi active s·∫Ω d√πng hashed private key ƒë·ªÉ commit, sau ƒë√≥ m·ªõi active th√¨ g·ª≠i privateCode
    mapping(bytes32 => bool) public miningPublicCodes;
    mapping(bytes32 => DataCode) public miningPrivateCodes;

    // ƒê·ªãa ch·ªâ c·ªßa contract PublicKeyFromPrivateKey
    PublicKeyFromPrivateKey public keyContract;

    event CodeCommitted(address indexed user, bytes32 commitHash);
    event CodeActivated(address indexed user);
    event CodeGenned(address indexed creator, uint256 boostRate, uint256 maxDuration, uint256 expireTime);
    event CodeReplaced(address indexed replacer, uint256 newBoostRate, uint256 newMaxDuration, uint256 newExpireTime);

    uint256 public constant REVEAL_DELAY = 15 seconds; // Th·ªùi gian ch·ªù t·ªëi thi·ªÉu tr∆∞·ªõc khi active

    uint256 private constant BONUS_REF_1 = 20; // 20%
    uint256 private constant BONUS_REF_2 = 10; // 10%
    uint256 private constant BONUS_REF_3 = 5; // 5%
    uint256 private constant BONUS_REF_4 = 5; // 5%

    uint256 private constant BONUS_SHOWROOM = 20; // 20%


    bytes32[] activeCodes;
    uint256 lastTimeMiningDevices;

    address owner;
    IMiningDevice private miningDevice;
    IMiningUser public miningUser;
    mapping(address => bytes32[]) public mActivePrivateCodes; //user => mang priva
    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor(address _keyContractAddress, address _codeContract) {
        keyContract = PublicKeyFromPrivateKey(_keyContractAddress); // Kh·ªüi t·∫°o ƒë·ªãa ch·ªâ c·ªßa contract l·∫•y public key

        codeContract = ICode(_codeContract);

        owner = msg.sender;
    }
    function setCodeContract(address _codeContract ) external onlyOwner {
        codeContract = ICode(_codeContract);
    }
    function setMiningDevice(address _miningDeviceAddress) external onlyOwner {
        miningDevice = IMiningDevice(_miningDeviceAddress);
    }

    function setMiningUser(address _miningUserAddress) external onlyOwner {
        miningUser = IMiningUser(_miningUserAddress);
    }

    // g·ªçi qua smart contract Code ƒë·ªÉ k√≠ch ho·∫°t code theo index trong list code t·∫°i SM Code do user ƒë∆∞·ª£c c·∫•p
    function genCode(uint256 indexCode, bytes32 _hashedPrivateCode, bytes32 _hashedPublicCode) external {
        require(indexCode > 0, "Invalid index code");
        require(_hashedPrivateCode != bytes32(0), "Invalid hashed private code");
        require(_hashedPublicCode != bytes32(0), "Invalid hashed public code");

        // ki·ªÉm tra xem c√≥ _hashedPrivateCode n√†o ƒë√£ active ch∆∞a
        require(miningPrivateCodes[_hashedPrivateCode].boostRate == 0, "Private Code already genned");
        require(!miningPublicCodes[_hashedPublicCode], "Public Code already genned");

        /*
         g·ªçi qua SM Code ƒë·ªÉ ti·∫øn h√†nh active cho code v√† nh·∫≠n l·∫°i th√¥ng tin c·ªßa code:
        */

        (uint256 boostRate, uint256 maxDuration, uint256 expireTime) = codeContract.activateCode(indexCode,msg.sender);
        require(boostRate > 0, "wrong boostRate");
        require(maxDuration > 0, "wrong maxDuration");
        require(expireTime > 0, "wrong expireTime");


        miningPrivateCodes[_hashedPrivateCode].boostRate = boostRate;
        miningPrivateCodes[_hashedPrivateCode].maxDuration = maxDuration;
        miningPrivateCodes[_hashedPrivateCode].expireTime = expireTime;



        miningPublicCodes[_hashedPublicCode] = true;

        emit CodeGenned(msg.sender, boostRate, maxDuration, expireTime);
    }
    function cancelCommit(address user) external onlyOwner {
        require(commits[user].commitHash != 0, "commit does not exist");
        delete commits[user];

    }
    /**
     * @dev Ng∆∞·ªùi d√πng g·ª≠i commit tr∆∞·ªõc v·ªõi hash(privateCode, secret, userAddress)
     * @param _commitHash Gi√° tr·ªã bƒÉm c·ªßa privateCode + secret + userAddress
     */
    function commitActivationCode(bytes32 _commitHash) external {
        require(commits[msg.sender].commitHash == 0, "Already committed"); 

        commits[msg.sender] = ActivationCommit({
            commitHash: _commitHash,
            commitTime: block.timestamp
        });

        emit CodeCommitted(msg.sender, _commitHash);
    }

    // replaceCode d√πng ƒë·ªÉ ƒë·ªïi code c≈© qua code m·ªõi
    function replaceCode(bytes32  _privateCode, bytes memory _secret, bytes32 _hashedPrivateCode, bytes32 _hashedPublicCode) external {
        require(_hashedPrivateCode == bytes32(0), "Invalid hashed private code");
        require(_hashedPublicCode == bytes32(0), "Invalid hashed private code");

        ActivationCommit memory commit = commits[msg.sender];

        require(commit.commitHash != 0, "No commit found");
        require(block.timestamp >= commit.commitTime + REVEAL_DELAY, "Wait for reveal time");

        bytes32 expectedHash = keccak256(abi.encodePacked(_privateCode, _secret, msg.sender));
        require(expectedHash == commit.commitHash, "Invalid code");

        // Ki·ªÉm tra code c√≥ ƒë√∫ng kh√¥ng?
        bytes32 hashedPrivateCode = keccak256(abi.encodePacked(_privateCode));
        require(miningPrivateCodes[hashedPrivateCode].owner == address(0), "Code not exists");
        require(miningPrivateCodes[hashedPrivateCode].activeTime == 0, "Code already activated");

        // L·∫•y public key t·ª´ private code ƒë·ªÉ ki·ªÉm tra
        bytes memory publicKey = keyContract.getPublicKeyFromPrivate(_privateCode); // S·ª≠ d·ª•ng h√†m l·∫•y public key t·ª´ contract kh√°c

        bytes32 hashedPublicKey = keccak256(abi.encodePacked(publicKey));
        require(miningPublicCodes[hashedPublicKey] == true, "Public code not found");

        delete miningPublicCodes[hashedPublicKey];
        
        uint256 boostRate = miningPrivateCodes[hashedPrivateCode].boostRate;
        uint256 maxDuration = miningPrivateCodes[hashedPrivateCode].maxDuration;
        uint256 expireTime = miningPrivateCodes[hashedPrivateCode].expireTime;

        delete miningPrivateCodes[hashedPrivateCode];


        miningPrivateCodes[_hashedPrivateCode].boostRate = boostRate;
        miningPrivateCodes[_hashedPrivateCode].maxDuration = maxDuration;
        miningPrivateCodes[_hashedPrivateCode].expireTime = expireTime;

        
        miningPublicCodes[_hashedPublicCode] = true;

        delete commits[msg.sender]; // X√≥a commit ƒë·ªÉ tr√°nh reuse
        emit CodeReplaced(msg.sender, boostRate, maxDuration, expireTime);
    }

    /**
     * @dev Sau √≠t nh·∫•t 15 gi√¢y, user c√≥ th·ªÉ g·ª≠i privateCode th·∫≠t ƒë·ªÉ k√≠ch ho·∫°t
     * @param _privateCode M√£ k√≠ch ho·∫°t th·∫≠t
     * @param _secret Gi√° tr·ªã b√≠ m·∫≠t ƒë√£ d√πng khi t·∫°o commit
     */
    function activateCode(bytes32  _privateCode, bytes memory _secret) external {
        ActivationCommit memory commit = commits[msg.sender];

        require(commit.commitHash != 0, "No commit found");
        require(block.timestamp >= commit.commitTime + REVEAL_DELAY, "Wait for reveal time");

        bytes32 expectedHash = keccak256(abi.encodePacked(_privateCode, _secret, msg.sender));
        // console.logBytes32(expectedHash);
        require(expectedHash == commit.commitHash, "Invalid code");

        // Ki·ªÉm tra code c√≥ ƒë√∫ng kh√¥ng?
        bytes32 hashedPrivateCode = keccak256(abi.encodePacked(_privateCode));
        require(miningPrivateCodes[hashedPrivateCode].owner == address(0), "Code not exists");
        require(miningPrivateCodes[hashedPrivateCode].activeTime == 0, "Code already activated");

        // L·∫•y public key t·ª´ private code ƒë·ªÉ x√≥a
        bytes memory publicKey = keyContract.getPublicKeyFromPrivate(_privateCode); // S·ª≠ d·ª•ng h√†m l·∫•y public key t·ª´ contract kh√°c
        bytes32 hashedPublicKey = keccak256(abi.encodePacked(publicKey));
        require(miningPublicCodes[hashedPublicKey] == true, "Public code not found");

        delete miningPublicCodes[hashedPublicKey];


        miningPrivateCodes[hashedPrivateCode].activeTime = block.timestamp;
        // g√°n m·ªói quan h·ªá gi·ªØa user v√† code
        miningPrivateCodes[hashedPrivateCode].owner = msg.sender;

        // g·ªçi qua cho link v√≠ user v√† owner

        // _device ƒë·ªÉ l·∫•y 19 byte cu·ªëi (152 bits) v√† gi·ªØ byte ƒë·∫ßu l√† 0
        address _deviceRemoveFirstBytes = address(uint160(uint256(hashedPublicKey) & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));
        miningDevice.linkCodeWithUser(msg.sender, _deviceRemoveFirstBytes);
        

        miningPrivateCodes[hashedPrivateCode].device = _deviceRemoveFirstBytes;
        miningPrivateCodes[hashedPrivateCode].privateCode = _privateCode;
        
        // l∆∞u danh s√°ch active code
        activeCodes.push(hashedPrivateCode);
        mActivePrivateCodes[msg.sender].push(_privateCode);

        // ti·∫øn h√†nh l·∫•y danh s√°ch li√™n k·∫øt gi·ªõi thi·ªáu ƒë·ªÉ l∆∞u v√†o code
        address[] memory devices = miningUser.getParentUser(msg.sender, 4);
        if (devices.length >= 1){
            miningPrivateCodes[hashedPrivateCode].ref_1 = devices[0];
        }
        if (devices.length >= 2){
            miningPrivateCodes[hashedPrivateCode].ref_2 = devices[1];
        }
        if (devices.length >= 3){
            miningPrivateCodes[hashedPrivateCode].ref_3 = devices[2];
        }
        if (devices.length == 4){
            miningPrivateCodes[hashedPrivateCode].ref_4 = devices[3];
        }

        // ti·∫øn h√†nh l·∫•y showroom g·∫ßn nh·∫•t
        // #to-do ƒë∆∞a th√™m smart contract showroom v√†o ƒë·ªÉ qu√©t v√† l∆∞u l·∫°i


        // mining code s·∫Ω ƒë∆∞·ª£c ofchain g·ªçi, v√† ti·∫øp theo s·∫Ω g·ªçi qua MiningDevice ƒë·∫ª l∆∞u code l·∫°i
        delete commits[msg.sender]; // X√≥a commit ƒë·ªÉ tr√°nh reuse


        emit CodeActivated(msg.sender);
    }
    function getActivePrivateCode(address user) external view returns(DataCode[] memory){
        require(msg.sender == owner || msg.sender == user,"only owner or owner code can call");
        bytes32[] memory activeCodeArr = mActivePrivateCodes[user];
        DataCode[] memory dataCodes = new DataCode[](activeCodeArr.length);
        for (uint256 i = 0; i < activeCodeArr.length; i++) {
            bytes32 hashedPrivateCode = keccak256(abi.encodePacked(activeCodeArr[i]));
            DataCode memory miningPrivateCode = miningPrivateCodes[hashedPrivateCode];
            dataCodes[i] = miningPrivateCode;
        }
        return dataCodes;
    }
    /**
     * @dev Ki·ªÉm tra xem public code c√≥ h·ª£p l·ªá hay kh√¥ng
     * @param _hashedPublicCode Gi√° tr·ªã bƒÉm c·ªßa publicCode
     * @return bool Tr·∫£ v·ªÅ true n·∫øu m√£ t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i false
     */
    function isCodeValid(bytes32 _hashedPublicCode) external view returns (bool) {
        return miningPublicCodes[_hashedPublicCode];
    }

    // offchain goi y√™u c·∫ßu
    function claim(uint256 halvingReward) external onlyOwner {
        require(block.timestamp - lastTimeMiningDevices > TIME_MINING, "not match time");

        lastTimeMiningDevices = block.timestamp;

        uint256[] memory removedIndexCodes = new uint256[](activeCodes.length);
        uint256 totalRemovedIndexCode = 0;
        // console.log("activeCodes.length:",activeCodes.length);
        for (uint256 i = 0; i < activeCodes.length; i++) {
            DataCode memory miningPrivateCode = miningPrivateCodes[activeCodes[i]];

            if (block.timestamp >= miningPrivateCode.expireTime ) {
                removedIndexCodes[totalRemovedIndexCode] = i;
                totalRemovedIndexCode += 1;
                continue;
            }
            // claimableAmount: t√≠nh tr√™n t·ªëc ƒë·ªô ƒë√†o v√† th·ªùi gian
            uint256 claimableAmount = miningPrivateCode.boostRate * halvingReward;
            // tinh cho ref

            if(miningPrivateCode.ref_1 != address(0)){
                miningDevice.addBalance(miningPrivateCode.ref_1, (claimableAmount *  BONUS_REF_1 / 100 ));
            }
            if(miningPrivateCode.ref_2 != address(0)){
                miningDevice.addBalance(miningPrivateCode.ref_2, (claimableAmount *  BONUS_REF_2 / 100 ));
            }
            if(miningPrivateCode.ref_3 != address(0)){
                miningDevice.addBalance(miningPrivateCode.ref_3, (claimableAmount *  BONUS_REF_3 / 100 ));
            }
            if(miningPrivateCode.ref_4 != address(0)){
                miningDevice.addBalance(miningPrivateCode.ref_4, (claimableAmount *  BONUS_REF_4 / 100 ));
            }
            if(miningPrivateCode.showroom != address(0)){
                miningDevice.addBalance(miningPrivateCode.showroom, (claimableAmount *  BONUS_SHOWROOM / 100 ));
            }

            // x·ª≠ l√Ω cho vi·ªác c·ªông balances
            if(miningPrivateCode.device != address(0)){
                miningDevice.addBalance(miningPrivateCode.device, claimableAmount);
            }
        }

        // X√≥a t·ª´ cu·ªëi v·ªÅ ƒë·∫ßu
        for (uint256 i = totalRemovedIndexCode; i > 0; i--) {
            uint256 indexCode = removedIndexCodes[i - 1];

            if ( indexCode != activeCodes.length - 1 ) {
                activeCodes[indexCode] = activeCodes[activeCodes.length - 1];
            }

            activeCodes.pop();
        }
        
    }

}

contract MiningDevice {
    using Signature for *;

    uint256 private constant TIME_MINING = 24 hours;

    // l∆∞u s·ªë l·∫ßn halving, m·ªói l·∫ßn halving th√¨ t·ªëc ƒë·ªô chia 2
    uint8 private halvingReward;
    uint8 public halvingCount;
    
    mapping(address => address[]) public userDevices;
    mapping(address => address[]) public deviceUsers; // L∆∞u tr·ªØ user li√™n k·∫øt v·ªõi t·ª´ng device

    mapping(address => bool) public lockedDevices;     // Ki·ªÉm tra tr·∫°ng th√°i kh√≥a c·ªßa thi·∫øt b·ªã

    mapping(address => mapping(address => uint256)) public linkTimeUserDevices;

    mapping(address => uint256) public lastTimeMiningDevices;
    mapping(address => uint256) public balances;
    mapping(address => bool) public isAdmin;

    event DeviceActivated(address indexed user, address indexed device);
    
    event BalanceUpdated(address indexed device, uint256 amount);
    
    
    // Event khi thi·∫øt b·ªã b·ªã kh√≥a
    event DeviceLocked(address indexed device, address indexed user);

    IMiningUser public miningUserContract;

    address private owner;
    address private miningCodeAddress;

    modifier onlyMiningUser() {
        require(msg.sender == address(miningUserContract), "Only mining user can call this");
        _;
    }

    modifier onlyMiningCode() {
        require(msg.sender == miningCodeAddress, "Only mining user can call this");
        _;
    }


    modifier onlyRegisteredUser() {
        require(miningUserContract.checkJoined(msg.sender), "Not a registered user");
        _;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }
    modifier onlyAdmin() {
        require(isAdmin[msg.sender] == true, "Not admin");
        _;
    }

    constructor() {
        owner = msg.sender;

        halvingReward = 3;
        halvingCount = 1;
    }
    function setMiningUser(address _miningUserContract) external onlyOwner {
        miningUserContract = IMiningUser(_miningUserContract);
    }
    function setMiningCode(address _miningCodeAddress) external onlyOwner {
        miningCodeAddress = _miningCodeAddress;
    }
    function setAdmin(address _admin, bool _approved) external onlyOwner {
        isAdmin[_admin] = _approved;
    }
    // H√†m chung x·ª≠ l√Ω link device ch·ªâ g·ªçi ƒë∆∞·ª£c t·ª´ miningCode
    function linkCodeWithUser(address _user, address _device) external onlyMiningCode {
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
        require(_user != address(0), "Invalid user address");
        require(_device != address(0), "Invalid device address");


        // require(userDevices[_user].length < 50, "Max linked device to user"); // m·ªói user c√≥ t·ªëi da 50 thi·∫øt b·ªã
        // require(deviceUsers[_device].length < 10, "Max linked device"); // m·ªói thi·∫øt b·ªã ƒë∆∞·ª£c link t·ªëi ƒëa ƒë·∫øn 10 t√†i kho·∫£n kh√°c nhau

        // Ki·ªÉm tra xem thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi user ch∆∞a
        require(linkTimeUserDevices[_device][_user] == 0, "Device already linked to this user");

        // Li√™n k·∫øt thi·∫øt b·ªã v·ªõi user
        userDevices[_user].push(_device);  // Th√™m thi·∫øt b·ªã v√†o danh s√°ch c·ªßa user
        // L∆∞u l·∫°i th√¥ng tin user li√™n k·∫øt v·ªõi device
        deviceUsers[_device].push(_user);

        linkTimeUserDevices[_device][_user] = block.timestamp;  // L∆∞u th·ªùi gian li√™n k·∫øt
        lastTimeMiningDevices[_device] = block.timestamp;  // C·∫≠p nh·∫≠t th·ªùi gian khai th√°c
        emit DeviceActivated(_user, _device);  // Ph√°t s·ª± ki·ªán li√™n k·∫øt th√†nh c√¥ng
    }

    // H√†m chung x·ª≠ l√Ω link device (ch·ªâ c√≥ th·ªÉ g·ªçi t·ª´ c√°c h√†m internal)
    function _linkDevice(address _user, bytes memory _signature, uint256 createdTime, address _device, bool isUserSignature) internal {
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
        require(_user != address(0), "Invalid user address");
        require(_device != address(0), "Invalid device address");
        require(_signature.length > 0, "Signature required");
        require(userDevices[_user].length < 50, "Max linked device to user"); // m·ªói user c√≥ t·ªëi da 50 thi·∫øt b·ªã
        require(deviceUsers[_device].length < 10, "Max linked device"); // m·ªói thi·∫øt b·ªã ƒë∆∞·ª£c link t·ªëi ƒëa ƒë·∫øn 10 t√†i kho·∫£n kh√°c nhau

        bytes32 expectedHash;

        // N·∫øu l√† ng∆∞·ªùi d√πng g·ªçi (isUserSignature = true), hash s·∫Ω l√† keccak c·ªßa _device, c√≤n kh√¥ng th√¨ l√† _user
        if (isUserSignature) {
            expectedHash = keccak256(abi.encodePacked(_device, createdTime));  // Keccak c·ªßa _device khi user g·ªçi
        } else {
            expectedHash = keccak256(abi.encodePacked(_user, createdTime));  // Keccak c·ªßa _user khi device g·ªçi
        }

        // Ki·ªÉm tra ch·ªØ k√Ω c·ªßa ng∆∞·ªùi d√πng ho·∫∑c thi·∫øt b·ªã d·ª±a tr√™n isUserSignature
        address recoveredAddress = Signature.recoverSigner(expectedHash, _signature);
     
        // Ki·ªÉm tra ch·ªØ k√Ω c·ªßa user ho·∫∑c device
        if (isUserSignature) {
            require(recoveredAddress == _device, "Invalid device signature");
        } else {
            require(recoveredAddress == _user, "Invalid user signature");
        }

        // Ki·ªÉm tra xem thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi user ch∆∞a
        require(linkTimeUserDevices[_device][_user] == 0, "Device already linked to this user");

        // Ki·ªÉm tra th·ªùi gian ch·ªØ k√Ω c√≥ h·ª£p l·ªá (trong v√≤ng 10 ph√∫t)
        require(block.timestamp - createdTime <= 600, "Signature expired");

        // Li√™n k·∫øt thi·∫øt b·ªã v·ªõi user
        userDevices[_user].push(_device);  // Th√™m thi·∫øt b·ªã v√†o danh s√°ch c·ªßa user
        // L∆∞u l·∫°i th√¥ng tin user li√™n k·∫øt v·ªõi device
        deviceUsers[_device].push(_user);

        linkTimeUserDevices[_device][_user] = block.timestamp;  // L∆∞u th·ªùi gian li√™n k·∫øt
        lastTimeMiningDevices[_device] = block.timestamp;  // C·∫≠p nh·∫≠t th·ªùi gian khai th√°c

        emit DeviceActivated(_user, _device);  // Ph√°t s·ª± ki·ªán li√™n k·∫øt th√†nh c√¥ng
    }
    // function add27ToLastByte(bytes memory input) public pure returns (bytes memory) {
    //         require(input.length > 0, "Empty input");

    //         // Copy input to new bytes
    //         bytes memory output = input;

    //         // Modify last byte
    //         output[output.length - 1] = bytes1(uint8(output[output.length - 1]) + 27);

    //         return output;
    //     }
    // H√†m cho thi·∫øt b·ªã g·ªçi ƒë·ªÉ li√™n k·∫øt
    function deviceLinkToUser(address _user, bytes memory _signature, uint256 createdTime) external {
        require(_user != address(0), "Invalid user address");

        // L·∫•y ƒë·ªãa ch·ªâ c·ªßa thi·∫øt b·ªã t·ª´ msg.sender
        address deviceAddress = msg.sender;

        // G·ªçi h√†m n·ªôi b·ªô ƒë·ªÉ x·ª≠ l√Ω li√™n k·∫øt, v·ªõi isUserSignature = true v√¨ ch·ªØ k√Ω c·ªßa user c·∫ßn x√°c minh
        _linkDevice(_user, _signature, createdTime, deviceAddress, false);
    }

    // H√†m cho ng∆∞·ªùi d√πng g·ªçi ƒë·ªÉ li√™n k·∫øt
    function userLinkToDevice(address _device, bytes memory _signature, uint256 createdTime) external {
        require(_device != address(0), "Invalid device address");

        // L·∫•y ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng t·ª´ msg.sender
        address userAddress = msg.sender;

        // G·ªçi h√†m n·ªôi b·ªô ƒë·ªÉ x·ª≠ l√Ω li√™n k·∫øt, v·ªõi isUserSignature = false v√¨ ch·ªØ k√Ω c·ªßa device c·∫ßn x√°c minh
        _linkDevice(userAddress, _signature, createdTime, _device, true);
    }

    // H√†m ƒë·ªÉ kh√≥a t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa m·ªôt user
    function lockAllDevicesOfUser(address device) external onlyOwner {
        // L·∫•y t·∫•t c·∫£ c√°c user ƒë√£ li√™n k·∫øt v·ªõi device n√†y
        address[] memory users = deviceUsers[device];

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ user n√†o li√™n k·∫øt v·ªõi device
        require(users.length > 0, "No users linked to this device");

        // Duy·ªát qua t·∫•t c·∫£ c√°c user v√† kh√≥a thi·∫øt b·ªã c·ªßa h·ªç
        for (uint256 i = 0; i < users.length; i++) {
            address user = users[i];

            miningUserContract.lockUser(user);

            // L·∫•y danh s√°ch thi·∫øt b·ªã c·ªßa user
            address[] memory userDevicesList = userDevices[user];

            // Duy·ªát qua t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa user v√† kh√≥a t·ª´ng thi·∫øt b·ªã
            for (uint256 j = 0; j < userDevicesList.length; j++) {
                address userDevice = userDevicesList[j];

                // Ki·ªÉm tra n·∫øu thi·∫øt b·ªã ch∆∞a b·ªã kh√≥a
                if(lockedDevices[userDevice]) {
                    continue;
                }

                // Kh√≥a thi·∫øt b·ªã
                lockedDevices[userDevice] = true;

                // Emit s·ª± ki·ªán kh√≥a thi·∫øt b·ªã
                emit DeviceLocked(userDevice, user);
            }
        }
    }
    // H√†m ch·ªâ c√≥ th·ªÉ g·ªçi b·ªüi PendingMiningDevice (validator s·∫Ω g·ªçi h√†m n√†y)
    function addBalance(address _device, uint256 amount) external onlyAdmin {
        // console.log("amount:",amount);
        // Ki·ªÉm tra n·∫øu amount ph·∫£i l·ªõn h∆°n 0
        require(amount > 0, "Amount must be greater than 0");
        require(lastTimeMiningDevices[_device] > 0, "device not active");
        
        // ch·ªâ cho ph√©p 2 l·∫ßn ƒë√†o c√°ch nhau ƒë√∫ng th·ªùi gian quy ƒë·ªãnh
        require(block.timestamp - lastTimeMiningDevices[_device] > TIME_MINING, "not match time");


        // C·ªông ph·∫ßn th∆∞·ªüng v√†o balance c·ªßa _device
        balances[_device] += amount;

        lastTimeMiningDevices[_device] = block.timestamp;

        // Emit s·ª± ki·ªán ƒë·ªÉ ghi nh·∫≠n thay ƒë·ªïi balance
        emit BalanceUpdated(_device, balances[_device]);
    }


    function isLinkUserDevice(address user, address device) public view returns (bool) {
        return linkTimeUserDevices[device][user] > 0;
    }

    function balanceOf(address device) public view returns (uint256) {
        return balances[device];
    }

    function withdraw(address device, uint256 amount) public onlyMiningUser {
        require(balances[device] >= amount, "Insufficient balance");
        balances[device] -= amount;
    }


    function rebackWithdraw(address device, uint256 amount) public onlyMiningUser {
        require(amount > 0, "Insufficient amount");
        balances[device] += amount;
    }
}

contract MiningUser {
    using Signature for *;
    struct User {
        address parent;
        address device; // l∆∞u device m√† user mu·ªën tr·∫£ ph√≠ ƒë·∫øn, device n√†y b·∫Øt bu·ªôc ph·∫£i ƒë√£ link ƒë·∫øn user
        uint8 referralCount;
        uint256 createdTime;
        bool isLocked;
    }


    struct DraftUser {
        address referral;
        string encryptToken;
        bytes32 OTP;
    }


    struct UserAmount {
        address device;
        uint256 usdtAmount;
        uint256 resourceAmount;
        uint256 lastWithdrawTime; // Th·ªùi gian c·ªßa l·∫ßn r√∫t g·∫ßn nh·∫•t
    }
    
    mapping(address => User) private users;
    mapping(address => UserAmount[]) private userAmounts;
    mapping(address => address[]) private referrals;
    mapping(address => bytes32) private activationCodes;
    
    event UserRegistered(address indexed user, address indexed parent);
    event ReferralRewardPaid(address indexed referrer, address indexed user, uint256 amount);
    event UserProcessing(address indexed user,address parent, bytes32 OTP);
    event UserActivated(address indexed user, address indexed activator);
    event DeviceReplaced(address indexed user, address oldDevice, address newDevice);

    event ResourcePurchased(address indexed user, address indexed device, uint256 resourceAmount, uint256 usdtAmount);
    event DepositRefunded(address indexed user, uint256 index, uint256 usdtAmount, uint256 ethReceived);


    
    event UserRef(address indexed referal, address indexed referer, string _referralEncryptTokenNoti);

    uint8 private constant MAX_REFERRAL = 10;
    uint8 private constant MAX_LEVELS = 3;
    uint256 private constant TIME_REFERRAL = 1 weeks;
    


    IERC20 public usdtToken; // USDT Token

    // ƒê·ªãa ch·ªâ c·ªßa contract miningDeviceContract
    MiningDevice public miningDeviceContract;

    address BE;
    mapping(address => DraftUser) private draftUsers; // ƒê·ªëi t∆∞·ª£ng draft user

    // khi l√† s·ªë √¢m, nghƒ©a l√† l·∫•y 1 / cho s·ªë d∆∞∆°ng, c√≤n khi l√† d∆∞∆°ng th√¨ nh√¢n tr·ª±c ti·∫øp
    int256 private halvingDeposit;

    mapping(address => mapping(uint256 => bool)) public isDepositWithdrawn;
    // INoti public Notification;
    mapping(address => bool) public mUserToOtpStatus; //user => true if otp right
    address rootUser;

    modifier onlyBE() {
        require(BE == msg.sender, "only BE can call");
        _;
    }


    modifier onlyMiningDevice() {
        require(msg.sender == address(miningDeviceContract), "Only mining device can call this");
        _;
    }


    constructor(
        address _BE,
        address _usdtAddress,
        address _miningDeviceAddress,
        address _rootUser
    ) {

        usdtToken = IERC20(_usdtAddress); // G√°n USDT contract

        BE = _BE;

        users[msg.sender] = User({
            parent: msg.sender,
            device: address(0),
            referralCount: 0,
            createdTime: block.timestamp,
            isLocked: false
        });

        miningDeviceContract = MiningDevice(_miningDeviceAddress);



        halvingDeposit = -1000;
        rootUser = _rootUser;
    }

    function lockUser(address _user) external onlyMiningDevice {
        users[_user].isLocked = true;

    }
    function registerUser(address _user, address _parent) internal {
        require(users[_user].parent == address(0), "User already exists");
        require(users[_parent].parent == address(0), "Parent not exists");
        require(_parent != _user, "Cannot refer yourself");
        require(!users[_parent].isLocked, "user is locked");
        require(users[_parent].referralCount < MAX_REFERRAL, "Max referrals reached");
        // parent can tham gia duoc 1 tuan thi moi gioi thieu
        require(block.timestamp - users[_parent].createdTime > TIME_REFERRAL, "Parent need joined before 1 week from this step");

        users[_user] = User({
            parent: _parent,
            device: address(0),
            referralCount: 0,
            createdTime: block.timestamp,
            isLocked: false
        });

        users[_parent].referralCount++;
        
        emit UserRegistered(_user, _parent);
    }

    // A show qr code info, B g·ªçi l√™n SM
    // encryptToken l√† token c·ªßa phone ƒë·∫ª cho nh·∫≠n noti th√¥ng b√°o
    // noti ch·ª©a code ƒë·ªÉ active
    function refUserViaQRCode(address _referralAddress, bytes memory _referralSignature, string memory _referralEncryptTokenNoti) external {
         // ‚ú≥Ô∏è Ki·ªÉm tra ng∆∞·ªùi g·ªçi ƒë√£ ƒë∆∞·ª£c active
        require(users[msg.sender].parent != address(0) || msg.sender == rootUser, "Only active users can refer others");
        require(users[_referralAddress].parent == address(0), "User exists");
        require(draftUsers[_referralAddress].referral == address(0), "Pending user confirm");


        // ki·ªÉm tra ch·ªØ k√Ω c·ªßa _referralSignature, xem referral ƒë√£ k√Ω l√™n _referralEncryptTokenNoti v·ªõi time nh·ªè h∆°n 10 ph√∫t ko

        address recoverAddress = Signature.recoverSigner(
            keccak256(abi.encodePacked(_referralEncryptTokenNoti))
            , _referralSignature
        );

        require(recoverAddress == _referralAddress, "address not match");
        
        draftUsers[msg.sender] = DraftUser({
            referral: _referralAddress,
            encryptToken: _referralEncryptTokenNoti,
            OTP: bytes32(0)
        });

        // b·∫Øn event token cho BE, ƒë·ªÉ BE c√≥ th·ªÉ g·ª≠i noti v·ªõi _OTP cho user b·∫•m v√†o
        emit UserRef(_referralAddress, msg.sender, _referralEncryptTokenNoti);
        // NotiParams memory params = NotiParams(
        //         // NOTIFIER,
        //         // data,
        //         // dataStruct,
        //         title,
        //         body
        //     );
        // Notification.AddNoti(params, _to);
    }
    function deleteRefUser() external {
        require(users[msg.sender].parent == address(0), "User exists");
        require(draftUsers[msg.sender].referral == address(0), "User exists");

        delete draftUsers[msg.sender];
    }

    // user b·∫•m v√†o noti, l·∫•y OTP g·ª≠i l√™n SM t·ªõi ƒëo·∫°n c·∫ßn khi user b·∫•m v√†o noti v√† ch·ªçn active
    function processUserWithOTP(address parent, bytes32 _OTP) external {
        require(draftUsers[parent].referral != address(0), "User not exists");


        draftUsers[parent].OTP = _OTP;

        // g·ª≠i s·ª± ki·ªán cho BE
        emit UserProcessing(msg.sender,parent, _OTP);
    }
    function updateOtpStatus(address parent,bool status) external onlyBE {
        mUserToOtpStatus[parent] = status;
    }
    
    // BE b·∫Øt ƒë∆∞·ª£c OTP, BE s·∫Ω g·ªçi l√™n ƒë·ªÉ active v√≠ cho user
    function activeUserByBe(address _parent, bytes32 _OTP) external onlyBE {
        // require(draftUsers[_parent].referral == address(0), "User exists");
        require(draftUsers[_parent].OTP == _OTP, "OTP not matched");

        address _user = draftUsers[_parent].referral;
        registerUser(_user, _parent);

        delete draftUsers[_user];
        
        emit UserActivated(_user, _parent);
    }


    function checkJoined(address _user) external view returns (bool) {
        require(!users[_user].isLocked, "user is locked");
        return users[_user].parent != address(0);
    }
    
    function getInfo() external view returns (User memory) {
        require(!users[msg.sender].isLocked, "user is locked");
        return users[msg.sender];
    }

    // h√†m n√†y m·ª•c ti√™u ƒë·ªÉ l·∫•y danh s√°ch c√°c t·∫ßng tr√™n c·ªßa user
    function getParentUser(address _user, uint8 _level) external view returns (address[] memory) {
        require(_level <= 4, "user is locked");

        address parent = users[_user].parent;
        address[] memory devices = new address[](_level);

        for (uint8 i = 0; i < _level; i++) {
            if (parent == address(0)) {
                break;
            }

            if (users[parent].isLocked) {
                devices[i] = address(0);
            } else {
                devices[i] = users[parent].device;
            }

            parent = users[parent].parent;
        }

        return devices;
    }

    function setDeviceDefault(address _device) external {
        require(!users[msg.sender].isLocked, "user is locked");
        require(users[msg.sender].device == address(0), "user had linked");

        require(miningDeviceContract.isLinkUserDevice(msg.sender, _device) == true, "user not link with device");

        users[msg.sender].device = _device;
    }


    /// @dev User c·ªçc ƒë·ªÉ r√∫t MTD v·ªÅ v√≠
    function depositToWithdraw(address _device, uint256 usdtAmount, uint256 resourceAmount) external {
        require(usdtAmount > 100, "Must send USDT to deposit");
        require(!users[msg.sender].isLocked, "user is locked");

        uint256 expectedUSDT = 0;
        if (halvingDeposit < 0) {
            expectedUSDT = resourceAmount / uint256(-1 * halvingDeposit);
        } else {
            expectedUSDT = resourceAmount * uint256(halvingDeposit);
        }
        require(usdtAmount >= expectedUSDT, "Not enough usdt");


        // ki·ªÉm tra xem user c√≥ s·ªë MTD l·ªõn h∆°n ko
        require(miningDeviceContract.isLinkUserDevice(msg.sender, _device) == true, "user not link with device");

        // L·∫•y s·ªë d∆∞ MTD tr√™n thi·∫øt b·ªã c·ªßa user
        uint256 deviceBalance = miningDeviceContract.balanceOf(_device);
        // Ki·ªÉm tra t·ª∑ l·ªá r√∫t t·ªëi ƒëa l√† 10% c·ªßa s·ªë d∆∞ tr√™n thi·∫øt b·ªã
        uint256 maxWithdrawable = deviceBalance * 10 / 100;  // 10% c·ªßa s·ªë d∆∞

        // Ki·ªÉm tra xem resourceAmount c√≥ l·ªõn h∆°n t·ª∑ l·ªá r√∫t t·ªëi ƒëa kh√¥ng
        require(resourceAmount <= maxWithdrawable, "Withdraw limit exceeded: You can only withdraw up to 10% of device balance.");


        // Ki·ªÉm tra th·ªùi gian gi·ªØa l·∫ßn c·ªçc tr∆∞·ªõc v√† l·∫ßn c·ªçc hi·ªán t·∫°i (·ªü ph·∫ßn t·ª≠ cu·ªëi c√πng trong m·∫£ng userAmounts)
        if (userAmounts[msg.sender].length > 0) {
            uint256 lastWithdrawTime = userAmounts[msg.sender][userAmounts[msg.sender].length - 1].lastWithdrawTime;
            uint256 timeDifference = block.timestamp - lastWithdrawTime;
            require(timeDifference >= 1 weeks, "You can only deposit once every week");
        }


        // Chuy·ªÉn USDT v√†o h·ª£p ƒë·ªìng
        uint256 balanceBefore = usdtToken.balanceOf(address(this));
        require(usdtToken.transferFrom(msg.sender, address(this), usdtAmount), "USDT transfer failed");
        uint256 receivedUSDT = usdtToken.balanceOf(address(this)) - balanceBefore;
        // require(receivedUSDT >= usdtAmount - 1e18 && receivedUSDT <= usdtAmount + 1e18, "Incorrect USDT transfer amount");//comment lai de balance nho van rut duoc 

        // Ghi nh·∫≠n d√≤ng ti·ªÅn t·ª´ user mua
        userAmounts[msg.sender].push(UserAmount({
            device: _device,
            usdtAmount: usdtAmount,
            resourceAmount: resourceAmount,
            lastWithdrawTime: block.timestamp // Th·ªùi gian l·∫ßn g·ª≠i c·ªçc ƒë·∫ßu ti√™n
        }));

        miningDeviceContract.withdraw(_device, resourceAmount);

         // ƒê√∫c ETH: chuy·ªÉn t·ª´ contract v·ªÅ v√≠ user
        (bool sent, ) = msg.sender.call{value: resourceAmount}("");
        require(sent, "Failed to send resource");


        emit ResourcePurchased(msg.sender, _device, resourceAmount, usdtAmount);
    }

    function getListDeposit(address _user) external view returns (UserAmount[] memory) {
        return userAmounts[_user];
    }

    function refundDeposit(uint256 index) external payable {
        require(index < userAmounts[msg.sender].length, "Invalid index");
        require(!isDepositWithdrawn[msg.sender][index], "Already withdrawn");
        require(msg.value > 0, "empty value");

        UserAmount memory info = userAmounts[msg.sender][index];

        require(msg.value == info.resourceAmount, "Incorrect resource amount");

        uint256 contractBalance = usdtToken.balanceOf(address(this));
        require(contractBalance >= info.usdtAmount, "Contract lacks USDT");

        // Tr·∫£ USDT l·∫°i cho user
        require(usdtToken.transfer(msg.sender, info.usdtAmount), "USDT refund failed");

        // ƒê√°nh d·∫•u ƒë√£ r√∫t
        isDepositWithdrawn[msg.sender][index] = true;

        // tr·∫£ l·∫°i mtd v√†o balance
        miningDeviceContract.rebackWithdraw(info.device, info.resourceAmount);

        emit DepositRefunded(msg.sender, index, info.usdtAmount, msg.value);
    }

    // H√†m nh·∫≠n ETH t·ª´ validator
    receive() external payable {}

}
